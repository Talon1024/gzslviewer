#!/usr/bin/env python3
import argparse
import glob
import os.path
import os
import re
import stat
import subprocess
import sys
import tempfile
import threading

cli = False
try:
    from tkinter import *
    from tkinter import filedialog
    from tkinter import simpledialog
    from tkinter import ttk
except ImportError:
    cli = True

re_string = r'(".+[^\\]"|\S+)'
re_shaderinfo = r"hardwareshader\s+(\S+)\s+" + re_string
re_gldefs_include = r"#include\s+" + re_string
re_comment = r"(?:/\*.+\*/)|(?://[^\n]+)"
re_letter = re.compile(r"([A-Za-z])")
re_float = r"(-?\d+(?:\.\d+(?:e\d+)?)?)"
re_shader = r"Shader\s+" + re_string
re_texture = r"Texture\s+" + re_string + r"\s+" + re_string
re_speed = r"Speed\s+" + re_float
re_define = r"define\s+" + re_string + r"\s*=\s*" + re_string
re_uniform = r"uniform\s+" + re_string + r"\s+" + re_string
re_shadername = r"name\s+" + re_string

SHADER_TYPE_TEXTURE = "TEXTURE_SHADER"
SHADER_TYPE_POSTPROCESS = "POSTPROCESS_SHADER"


class LumpManager:
    def __init__(self, modpath):
        self.lump_filenames = {}
        self.gldefs_files = []
        self._modpath = modpath

    def populate(self, callback=None):
        # This is a long-running operation, so it should not be run on the
        # main thread.
        mod_glob = os.path.join(self._modpath, r"**/*")
        for lumpfn in glob.iglob(mod_glob, recursive=True):
            lumppath = os.path.relpath(lumpfn, self._modpath).lower()
            lumppath = lumppath.replace(os.sep, "/")
            self.lump_filenames[lumppath] = lumpfn
            shortname = LumpManager.lump_name(os.path.basename(lumpfn))
            self.lump_filenames[shortname] = lumpfn
            if shortname == "gldefs":
                self.gldefs_files.append(lumppath)
        if callback is not None:
            callback(self)

    def __getitem__(self, key):
        fname = key.lower()
        if "/" not in key and len(key) <= 8:  # Not full path
            fname = LumpManager.lump_name(key)
        return self.lump_filenames[fname]

    @staticmethod
    def lump_name(filename):
        filename = filename.lower()
        dot_pos = filename.find(".")
        if dot_pos >= 0:
            filename = filename[:dot_pos]
        if len(filename) > 8:
            filename = filename[:8]
        return filename

    def open(self, filename, *args, **kwargs):
        filepath = self[filename]
        return open(filepath, *args, **kwargs)


class ShaderUniform:
    uniform_types = {
        vtype: None for vtype in ("int", "float", "vec2", "vec3")}

    def __init__(self, name, value=(1., 1., 1.), vtype="vec3"):
        self.name = name
        self.value = value
        if vtype not in self.uniform_types:
            vtype = "vec3"
        self.vtype = vtype

    def __str__(self):
        return "uniform {2} {0} = {2}({1});\n".format(
            self.name, self.get_value(), self.vtype)

    @staticmethod
    def parse_value(text, vtype, sep=" "):
        if vtype == "int":
            return int(text, 10)
        elif vtype == "float":
            return float(text)
        words = text.split(sep)
        if vtype == "vec2":
            words += ["0"] * (2 - len(words))
            # First two "words" of text
            return tuple(map(float, words))[:2]
        elif vtype == "vec3":
            words += ["0"] * (3 - len(words))
            return tuple(map(float, words))[:3]

    def assign_value(self, text):
        self.value = ShaderUniform.parse_value(text, self.vtype)

    def get_value(self, sep=","):
        if self.vtype == "int" or self.vtype == "float":
            return self.value
        else:
            return sep.join(map(str, self.value))


class GZSLViewerGUI:
    def __init__(self, root, glslviewer_available):
        # Set up variables
        self.manager: LumpManager = None
        self.shaderlist: list = []
        self.shader_named: dict = {}
        self.uniform_with_id: dict = {}
        self.glslviewer_path: StringVar = StringVar()
        self.modpath: StringVar = StringVar()
        self.modelpath: StringVar = StringVar()
        self.image_list: StringVar = StringVar()
        # The Tk Combobox widget doesn't have an event for when the user types
        # text into the Combobox, so this is useless for now.
        # self.shader_alphabet = {}
        self.mod_set: bool = False
        self.glslviewer_set: bool = bool(glslviewer_available)
        self.cur_shader: ShaderDefinition = None
        self.glslviewer_available: str = glslviewer_available
        # GUI elements to be set later
        self.cbo_shaders: ttk.Combobox = None
        self.btn_view: ttk.Button = None
        self.tvw_uniforms: ttk.Treeview = None
        self.tvw_uniforms_items: list = []
        self.lst_images: Listbox = None
        self.lbl_image_uniform: ttk.Label = None
        self.image_uniform_image: PhotoImage = None
        # Preliminary GUI setup
        root.title("GZSLViewer")
        # Content frame
        mainframe = ttk.Frame(root, padding="2 2 2 2")
        mainframe.grid(column=0, row=0, sticky=(N, W, E, S))
        # Set up notebook
        notebook = ttk.Notebook(mainframe)
        notebook.grid(column=0, row=0)
        paths_tab_frame = ttk.Frame()
        self._paths_tab(paths_tab_frame, glslviewer_available)
        uniforms_tab_frame = ttk.Frame()
        self._uniforms_tab(uniforms_tab_frame)
        notebook.add(paths_tab_frame, text="Paths")
        notebook.add(uniforms_tab_frame, text="Uniforms")
        notebook.select(0)
        notebook.enable_traversal()
        # Setup complete
        root.mainloop()

    def _paths_tab(self, parent, glslviewer_available):
        # +--------------------------------------+
        # |             GZSLViewer               |
        # +--------------------------------------+
        # | *Paths | Uniforms |                  | <- Notebook (tabs)
        # |--------+----------+                  | The asterisk indicates the
        # | GLSLViewer path: ______..  |Browse|  | current tab.
        # | Mod path: _____________..  |Browse|  |
        # | 3D model (opt.): |____..|  |Browse|  |
        # | Shader:  |______________________|V|  |
        # | | View |                 | Cancel |  |
        # +--------------------------------------+
        view_state = "normal"
        glslviewer_row_add = 0
        # If GLSLViewer isn't available...
        if not glslviewer_available:
            glslviewer_row_add = 1
            glslviewer_row = -1 + glslviewer_row_add
            ttk.Label(parent, text="GLSLViewer path:").grid(column=0, row=glslviewer_row)
            ttk.Label(parent, textvariable=self.glslviewer_path).grid(column=1, columnspan=2, row=glslviewer_row)
            ttk.Button(parent, text="Browse", command=self.ask_glslviewer_path).grid(column=3, row=glslviewer_row)
            view_state = "disabled"
        else:
            self.glslviewer_path.set(glslviewer_available)
        glslviewer_row = -1 + glslviewer_row_add
        mod_path_row = 0 + glslviewer_row_add
        model_row = 1 + glslviewer_row_add
        shader_row = 2 + glslviewer_row_add
        control_row = 3 + glslviewer_row_add
        # texture_row = 4 + glslviewer_row_add
        # Top row - mod selection
        ttk.Label(parent, text="Mod path:").grid(column=0, row=mod_path_row)
        ttk.Label(parent, textvariable=self.modpath).grid(column=1, columnspan=2, row=mod_path_row)
        ttk.Button(parent, text="Browse", command=self.ask_mod_path).grid(column=3, row=mod_path_row)
        # Model selector
        ttk.Label(parent, text="3D model (optional)").grid(column=0, row=model_row)
        ttk.Entry(parent, textvariable=self.modelpath, validate="focus", validatecommand=self.validate_model).grid(column=1, row=model_row, columnspan=2)
        ttk.Button(parent, text="Browse", command=self.ask_model_path).grid(column=3, row=model_row)
        # Shader selector
        ttk.Label(parent, text="Shader:").grid(column=0, row=shader_row)
        self.cbo_shaders = ttk.Combobox(parent, state="readonly")
        self.cbo_shaders.grid(column=1, columnspan=2, row=shader_row)
        self.cbo_shaders.bind("<<ComboboxSelected>>", self.set_shader)
        # Main controls
        self.btn_view = ttk.Button(parent, text="View", state=view_state, command=self.view)
        self.btn_view.grid(column=1, columnspan=2, row=control_row)

    def _uniforms_tab(self, parent):
        # +--------------------------------------+
        # |             GZSLViewer               |
        # +--------------------------------------+
        # | Paths | *Uniforms |                  | <- Notebook (tabs)
        # |-------+-----------+                  |
        # | Uniforms:                            |
        # | +----------------------------------+ |
        # | | Name            |          Value | | <- Treeview
        # | | uObjectColor    |    255 255 255 | |
        # | | uObjectColor2   |    100 140 255 | |
        # | |                 |                | |
        # | +----------------------------------+ |
        # | Textures:                            |
        # | +--------+  +---------------------+  |
        # | |WATR_A00|  |                     |  | <- Listbox | Label
        # | |WFNOISE |  |   Texture image     |  |
        # | |        |  |                     |  |
        # | +--------+  +---------------------+  |
        # +--------------------------------------+
        # Uniforms
        ttk.Label(parent, text="Uniforms (double-click to edit):")\
            .grid(column=0, row=0, columnspan=2)
        self.tvw_uniforms = ttk.Treeview(
            parent, columns=("Name", "Value"), height=3, selectmode="browse",
            show="headings")
        self.tvw_uniforms.grid(column=0, row=1, columnspan=2)
        self.tvw_uniforms.bind("<Double-Button-1>", self.on_uniform_edit)
        # Images
        ttk.Label(parent, text="Images:").grid(column=0, row=2)
        self.lst_images = Listbox(
            parent, listvariable=self.image_list, height=3,
            selectmode="single")
        self.lst_images.grid(column=0, row=3)
        self.lst_images.bind("<<ListboxSelect>>", self.on_select_image)
        self.lbl_image_uniform = ttk.Label(
            parent, text="No textures defined", background="#333",
            foreground="#fff")
        self.lbl_image_uniform.grid(column=1, row=3, sticky=(N, S, E, W))

    def ask_mod_path(self):
        self.modpath.set(filedialog.askdirectory(title="Select mod folder", mustexist=True))
        self.on_select_mod()

    def ask_model_path(self):
        self.modelpath.set(filedialog.askopenfilename(
            filetypes=(("OBJ", ".obj"),)
        ))

    def ask_glslviewer_path(self):
        path_to_check = filedialog.askdirectory(
            title="Select GLSLViewer folder", mustexist=True)
        glslviewer_path = is_glslviewer_path(path_to_check)
        if not glslviewer_path:
            self.glslviewer_path.set("")
        else:
            self.glslviewer_path.set(glslviewer_path)
            self.glslviewer_set = True
        self.check_view()

    def validate_model(self):
        if self.modelpath.get() == "":
            return True
        re_obj = r"\.obj"
        if not re.search(re_obj, self.modelpath.get(), re.IGNORECASE):
            # Model must be an OBJ!
            self.modelpath.set("")
            return False
        if not os.path.lexists(self.modelpath.get()):
            self.modelpath.set("")
            return False
        return True

    def on_select_mod(self):
        self.manager = LumpManager(self.modpath.get())
        glob_thread = threading.Thread(
            target=self.manager.populate, args=(self.on_lumps_globbed,))
        glob_thread.start()

    def on_lumps_globbed(self, lump_manager):
        self.shaderlist = get_shaders(lump_manager)
        shaderlist = []
        for shaderdef in self.shaderlist:
            shader_name = str(shaderdef)
            # shader_letter = shader_name.lower()[0]
            self.shader_named[shader_name] = shaderdef
            # self.shader_alphabet.setdefault(shader_letter, [])
            # self.shader_alphabet[shader_letter].append(shader_name)
            shaderlist.append(shader_name)
        self.cbo_shaders["values"] = shaderlist
        self.mod_set = len(shaderlist) > 0
        self.check_view()

    def set_shader(self, tk_event):
        # tk_event.widget: Combobox
        tk_event.widget.selection_clear()
        cur_shader = tk_event.widget.get()  # String
        self.cur_shader = self.shader_named[cur_shader]
        self.update_image_list()
        self.update_uniforms()
        self.check_view()

    def check_view(self):
        if self.glslviewer_set and self.mod_set and self.cur_shader:
            self.btn_view.state(["!disabled"])
        else:
            self.btn_view.state(["disabled"])

    def on_uniform_edit(self, tk_event):
        # tk_event.widget: Treeview
        to_edit = tk_event.widget.selection()
        if len(to_edit) == 0:  # Nothing selected
            return
        to_edit = to_edit[0]
        uniform: ShaderUniform = self.uniform_with_id[to_edit]
        result = simpledialog.askstring(
            "Editing uniform " + to_edit,
            "Please enter the new value for " + to_edit + ":",
            initialvalue=uniform.get_value(" "))
        if result is not None:
            uniform.assign_value(result)
        self.tvw_uniforms.item(
            to_edit, values=(uniform.name, uniform.get_value(" ")))

    def update_uniforms(self):
        for item in self.tvw_uniforms_items:
            self.tvw_uniforms.delete(item)
        self.tvw_uniforms_items = []
        self.uniform_with_id.clear()
        for uniform in self.cur_shader.uniforms:
            uniform_id = self.tvw_uniforms.insert(
                "", "end", iid=uniform.name,
                values=(uniform.name, uniform.get_value(" "))
            )
            self.tvw_uniforms_items.append(uniform_id)
            self.uniform_with_id[uniform_id] = uniform

    def update_image_list(self):
        get_texture_name = lambda tex: tex[0]
        images = (
            "None " +
            " ".join(map(get_texture_name, self.cur_shader.textures)))
        self.image_list.set(images)
        self.image_uniform_image = None
        self.lbl_image_uniform["image"] = None
        if len(self.cur_shader.textures) > 0:
            self.lbl_image_uniform["text"] = "Texture not selected"
        else:
            self.lbl_image_uniform["text"] = "No textures defined"

    def on_select_image(self, tk_event):
        # tk_event.widget: Listbox
        selection_index = tk_event.widget.curselection()
        if len(selection_index) == 0:
            return
        selection_index = selection_index[0]
        if selection_index == 0:
            self.image_uniform_image = None
            self.lbl_image_uniform["image"] = None
            return
        selection_index -= 1
        items = self.image_list.get().split()
        image = self.cur_shader.textures[selection_index][1]
        image_file = self.manager[image]
        self.image_uniform_image = PhotoImage(file=image_file)
        self.lbl_image_uniform["image"] = self.image_uniform_image

    def view(self):
        model_name = self.modelpath.get()
        if model_name == "": model_name = None
        glslviewer_path = self.glslviewer_path.get()
        self.cur_shader.view(glslviewer_path, model_name)
        self.cur_shader.cleanup()


class ShaderDefinition:
    frag_suffix = ".frag"
    texture_shader_uniforms = [
        ShaderUniform("uObjectColor"),
        ShaderUniform("uObjectColor2")]

    def __init__(self, identifier, main_texture, shader, speed, defines,
                 textures, uniforms, manager, shader_type=SHADER_TYPE_TEXTURE):
        self.identifier = identifier
        self.main_texture = main_texture
        self.shader = shader
        self.speed = speed
        self.defines = defines
        self.textures = tuple(textures.items())
        self.manager = manager
        self.uniforms = uniforms
        self.shader_type = shader_type

    @staticmethod
    def fix_glsl_text(text):
        text = re.sub(r"gl_TexCoord\[0\]", "vTexCoord", text, re.IGNORECASE)
        text = re.sub(
            r"vec4\s+ProcessTexel\s*\([^)]*\)",
            "vec4 Process(vec4 _c_o_l_o_r_)",
            text, re.IGNORECASE
        )
        text = re.sub(r"uniform\s+float\s+timer;", "", text, re.IGNORECASE)
        return text

    def convert_shader(self):
        define_bool = "#define {}\n"
        define_kvpair = "#define {} {}\n"
        uniform_texture = "uniform sampler2D {};\n"
        with self.manager.open(self.shader, "r") as shader_file, (
            tempfile.NamedTemporaryFile("w", suffix=self.frag_suffix,
                                        delete=False)) as temp_shader:
            self.temp_shader_path = temp_shader.name
            temp_shader.write("#version 330 core\n")
            temp_shader.write(define_bool.format(self.shader_type))
            for uniform_index, extra_texture in enumerate(self.textures):
                uniform_name = "u_tex{}".format(uniform_index + 1)
                temp_shader.write(uniform_texture.format(uniform_name))
                temp_shader.write(define_kvpair.format(
                    extra_texture[0], uniform_name))
            for uniform in self.uniforms:
                temp_shader.write(str(uniform))
            temp_shader.write("#include \"gzcompat.frag\"\n")
            for shader_text in shader_file:
                shader_text = ShaderDefinition.fix_glsl_text(shader_text)
                temp_shader.write(shader_text)
        return self.temp_shader_path

    def get_glslviewer_args(self, glslviewer_path, model_path=None):
        argu = [glslviewer_path, "-vFlip",
                self.convert_shader(),
                self.main_texture]
        for texture in self.textures:
            argu.append(self.manager[texture[1]])
        if model_path and self.shader_type != SHADER_TYPE_POSTPROCESS:
            argu.append(model_path)
        for define in self.defines.items():
            define_str = "-D{0},{1}".format(*define)
            argu.append(define_str)
        return argu

    def view(self, glslviewer_path="./glslViewer", model_path=None):
        argu = self.get_glslviewer_args(glslviewer_path, model_path)
        viewer_env = os.environ
        viewer_env["MESA_GL_VERSION_OVERRIDE"] = "3.30"
        subprocess.run(argu, env=viewer_env)

    def cleanup(self):
        os.remove(self.temp_shader_path)

    def __str__(self):
        return self.identifier

def get_shaders(manager):

    def parse_include(match):
        include_fname = match.group(1).strip("\"")
        with manager.open(include_fname, "r") as include_file:
            include_text = include_file.read()
        return include_text

    gldefs_text = ""
    for gldefs_path in manager.gldefs_files:
        with manager.open(gldefs_path, "r") as gldefs_file:
            gldefs_text += gldefs_file.read()

    gldefs_text = re.sub(re_gldefs_include, parse_include,
                         gldefs_text, flags=re.IGNORECASE)
    gldefs_text = re.sub(re_comment, "", gldefs_text, flags=re.DOTALL)
    shader_defs = []

    for shader_match in re.finditer(re_shaderinfo, gldefs_text, re.IGNORECASE):
        # TODO: Post-processing shader support
        if shader_match.group(1).lower() == "postprocess":
            continue
        def_start = gldefs_text.find("{", shader_match.start(1))
        def_end = gldefs_text.find("}", shader_match.start(1))
        shader_def = gldefs_text[def_start:def_end]
        raw_texname = shader_match.group(2).lower().strip("\"")

        texname = manager[raw_texname]
        speed = 1
        defines = {}
        textures = {}
        uniforms = []
        shader_match = re.search(re_shader, shader_def, re.IGNORECASE)
        # Shader filename is required
        if shader_match:
            try:
                shader_fname = shader_match.group(1).strip("\"")
            except IndexError:
                # Invalid shader
                continue
        else:
            continue
        speed_match = re.search(re_speed, shader_def, re.IGNORECASE)
        if speed_match:
            speed = float(speed_match.group(1))
        for define_match in re.finditer(re_define, shader_def, re.IGNORECASE):
            defines[define_match.group(1)] = define_match.group(2)
        for texture_match in re.finditer(re_texture, shader_def, re.IGNORECASE):
            texture_name = texture_match.group(1).strip("\"")
            texture_file = texture_match.group(2).strip("\"")
            textures[texture_name] = texture_file
        for uniform_match in re.finditer(re_uniform, shader_def, re.IGNORECASE):
            uniform_type = uniform_match.group(1).strip("\"")
            uniform_name = uniform_match.group(2).strip("\"")
            uniforms.append(ShaderUniform(uniform_name, vtype=uniform_type))
        if len(uniforms) == 0:
            # Not copying this is intentional
            uniforms = ShaderDefinition.texture_shader_uniforms
        shader_defs.append(ShaderDefinition(
            raw_texname, texname, shader_fname, speed, defines, textures,
            uniforms, manager))
    return shader_defs


def is_glslviewer_path(path):
    def case_desensitize(letter):
        lower = letter.group(1).lower()
        upper = letter.group(1).upper()
        return "[" + lower + upper + "]"
    glslviewer_exename = "glslviewer"
    if sys.platform == "win32" or sys.platform == "cygwin":
        glslviewer_exename += ".exe"
    glslviewer_glob = os.path.join(
        path, re.sub(re_letter, case_desensitize, glslviewer_exename))
    glslviewer_results = glob.glob(glslviewer_glob)
    try:
        glslviewer_incwd = glslviewer_results[0]
    except IndexError:
        return None
    # Ensure glslviewer is an executable regular file
    if (os.path.isfile(glslviewer_incwd) and
            os.access(glslviewer_incwd, os.R_OK | os.X_OK)):
        return glslviewer_incwd
    return None


def run():
    glslviewer_incwd = is_glslviewer_path(os.getcwd())
    if cli:
        if not glslviewer_incwd:
            print("Please run this in GLSLViewer's folder!", file=sys.stderr)
            exit(1)
        # Parse CLI arguments
        parser = argparse.ArgumentParser(
            description="Load a GZDoom shader into glslviewer"
        )
        parser.add_argument("path", help="Path to mod folder")
        parser.add_argument("--model", help="Path to 3D model (OBJ)")
        parser.add_argument("--uObjectColor", help="Value of uObjectColor uniform")
        parser.add_argument("--uObjectColor2", help="Value of uObjectColor2 uniform")
        args = parser.parse_args()
        mod_lumps = LumpManager(args.path)
        mod_lumps.populate()
        # Prompt user and run GLSLViewer
        shader_defs = get_shaders(mod_lumps)
        print("Select a shader to view:")
        for index, shader in enumerate(shader_defs):
            print("{}. {}".format(index + 1, shader.identifier))
        shader_to_view = input(">")
        shader_index = int(shader_to_view, 10) - 1
        shader_defs[shader_index].view(glslviewer_incwd, args.model)
        shader_defs[shader_index].cleanup()
    else:
        GZSLViewerGUI(Tk(), glslviewer_incwd)

if __name__ == "__main__":
    run()
